name: CI

on:
  push:
    branches:
      - main
      - release/*
  pull_request:
    branches:
      - main
      - release/*

jobs:
  hygiene:
    name: Hygiene and Layering
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2-beta
        with:
          node-version: 12

      - name: Cache node modules
        id: cacheNodeModules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-cacheNodeModules5-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-cacheNodeModules5-
      - name: Get yarn cache directory path
        id: yarnCacheDirPath
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn directory
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarnCacheDirPath.outputs.dir }}
          key: ${{ runner.os }}-yarnCacheDir-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarnCacheDir-
      - name: Execute yarn
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
        run: yarn --frozen-lockfile --network-timeout 180000

      - name: Run Hygiene Checks
        run: yarn gulp hygiene

      - name: Run Valid Layers Checks
        run: yarn valid-layers-check

  # build-compile-core:
  #   name: "Build: Compile Core"
  #   runs-on: ubuntu-latest
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - uses: actions/checkout@v2

  #     - uses: actions/setup-node@v2-beta
  #       with:
  #         node-version: 12

  #     - name: Cache node modules
  #       id: cacheNodeModules
  #       uses: actions/cache@v2
  #       with:
  #         path: '**/node_modules'
  #         key: ${{ runner.os }}-cacheNodeModules5-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
  #         restore-keys: ${{ runner.os }}-cacheNodeModules5-
  #     - name: Get yarn cache directory path
  #       id: yarnCacheDirPath
  #       if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
  #       run: echo "::set-output name=dir::$(yarn cache dir)"
  #     - name: Cache yarn directory
  #       if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
  #       uses: actions/cache@v2
  #       with:
  #         path: ${{ steps.yarnCacheDirPath.outputs.dir }}
  #         key: ${{ runner.os }}-yarnCacheDir-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
  #         restore-keys: ${{ runner.os }}-yarnCacheDir-
  #     - name: Execute yarn
  #       if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
  #       env:
  #         PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
  #         ELECTRON_SKIP_BINARY_DOWNLOAD: 1
  #       run: yarn --frozen-lockfile --network-timeout 180000

  #     - name: Cache compiled core code
  #       id: cacheCompiledCoreCode
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           out-build
  #           out-vscode-min
  #         key: cacheCompiledCoreCode-${{ github.sha }}

  #     - name: Compile Core
  #       if: ${{ steps.cacheCompiledCoreCode.outputs.cache-hit != 'true' }}
  #       run: yarn gulp compile-build

  #     - name: Minify VS Code
  #       if: ${{ steps.cacheCompiledCoreCode.outputs.cache-hit != 'true' }}
  #       run: yarn gulp minify-vscode

  # build-compile-extensions:
  #   name: "Build: Compile Extensions"
  #   runs-on: ubuntu-latest
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - uses: actions/checkout@v2

  #     - uses: actions/setup-node@v2-beta
  #       with:
  #         node-version: 12

  #     - name: Cache node modules
  #       id: cacheNodeModules
  #       uses: actions/cache@v2
  #       with:
  #         path: '**/node_modules'
  #         key: ${{ runner.os }}-cacheNodeModules4-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
  #         restore-keys: ${{ runner.os }}-cacheNodeModules4-
  #     - name: Get yarn cache directory path
  #       id: yarnCacheDirPath
  #       if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
  #       run: echo "::set-output name=dir::$(yarn cache dir)"
  #     - name: Cache yarn directory
  #       if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
  #       uses: actions/cache@v2
  #       with:
  #         path: ${{ steps.yarnCacheDirPath.outputs.dir }}
  #         key: ${{ runner.os }}-yarnCacheDir-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
  #         restore-keys: ${{ runner.os }}-yarnCacheDir-
  #     - name: Execute yarn
  #       if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
  #       env:
  #         PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
  #         ELECTRON_SKIP_BINARY_DOWNLOAD: 1
  #       run: yarn --frozen-lockfile --network-timeout 180000

  #     - name: Cache compiled extensions code
  #       id: cacheCompiledExtensionsCode
  #       uses: actions/cache@v2
  #       with:
  #         path: .build
  #         key: cacheCompiledExtensionsCode-${{ github.sha }}

  #     - name: Compile Extensions
  #       if: ${{ steps.cacheCompiledExtensionsCode.outputs.cache-hit != 'true' }}
  #       run: yarn gulp compile-extensions-build

  # build-linux-unit-tests:
  #   name: "Build: Linux Unit Tests"
  #   needs: [build-compile-core, build-compile-extensions]
  #   runs-on: ubuntu-latest
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - uses: actions/checkout@v2.2.0
  #     # TODO: rename azure-pipelines/linux/xvfb.init to github-actions
  #     - run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libkrb5-dev # {{SQL CARBON EDIT}} add kerberos dep
  #         sudo cp build/azure-pipelines/linux/xvfb.init /etc/init.d/xvfb
  #         sudo chmod +x /etc/init.d/xvfb
  #         sudo update-rc.d xvfb defaults
  #         sudo service xvfb start
  #         key: ${{ runner.os }}-cacheNodeModules4-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
  #         restore-keys: ${{ runner.os }}-cacheNodeModules4-
  #       name: Setup Build Environment
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 10
  #     # TODO: cache node modules
  #     # Increase timeout to get around latency issues when fetching certain packages
  #         key: ${{ runner.os }}-cacheNodeModules4-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
  #         restore-keys: ${{ runner.os }}-cacheNodeModules4-
  #     - run: |
  #         yarn config set network-timeout 300000
  #         yarn --frozen-lockfile
  #       name: Install Dependencies
  #     - run: yarn electron x64
  #       name: Download Electron
  #     - run: yarn gulp hygiene
  #       name: Run Hygiene Checks
  #         key: ${{ runner.os }}-cacheNodeModules4-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
  #         restore-keys: ${{ runner.os }}-cacheNodeModules4-
  #     - run: yarn strict-vscode # {{SQL CARBON EDIT}} add step
  #       name: Run Strict Compile Options
  #         key: ${{ runner.os }}-cacheNodeModules4-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
  #         restore-keys: ${{ runner.os }}-cacheNodeModules4-
  #     #   name: Run Monaco Editor Checks
  #     - run: yarn valid-layers-check
  #       name: Run Valid Layers Checks
  #     - run: yarn compile
  #         key: ${{ runner.os }}-cacheNodeModules4-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
  #         restore-keys: ${{ runner.os }}-cacheNodeModules4-
  #       name: Compile Sources
  #     # - run: yarn download-builtin-extensions {{SQL CARBON EDIT}} remove step
  #     #   name: Download Built-in Extensions
  #     - run: DISPLAY=:10 ./scripts/test.sh --tfs "Unit Tests" --coverage --runGlob "**/sql/**/*.test.js"
  #       name: Run Unit Tests (Electron)
  #     - run: DISPLAY=:10 ./scripts/test-extensions-unit.sh
  #       name: Run Extension Unit Tests (Electron)
  #       # {{SQL CARBON EDIT}} Add coveralls. We merge first to get around issue where parallel builds weren't being combined correctly
  #     - run: node test/combineCoverage
  #       name: Combine code coverage files
  #         key: ${{ runner.os }}-cacheNodeModules4-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
  #         restore-keys: ${{ runner.os }}-cacheNodeModules4-
  #     - name: Upload Code Coverage
  #       uses: coverallsapp/github-action@v1.1.1
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         path-to-lcov: "test/coverage/lcov.info"

    # Fails with cryptic error (e.g. https://github.com/microsoft/vscode/pull/90292/checks?check_run_id=433681926#step:13:9)
          key: ${{ runner.os }}-cacheNodeModules4-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-cacheNodeModules4-
    # - run: DISPLAY=:10 yarn test-browser --browser chromium
    #   name: Run Unit Tests (Browser)
    # - run: DISPLAY=:10 ./scripts/test-integration.sh --tfs "Integration Tests" {{SQL CARBON EDIT}} remove step
    #   name: Run Integration Tests (Electron)

  windows:
    runs-on: windows-2016
    env:
      CHILD_CONCURRENCY: "1"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2.2.0
      - uses: actions/setup-node@v1
        with:
          node-version: 10
      - uses: actions/setup-python@v1
        with:
          python-version: "2.x"
      # Increase timeout to get around latency issues when fetching certain packages
      - run: |
          yarn config set network-timeout 300000
          yarn --frozen-lockfile
        name: Install Dependencies
      - run: yarn electron
        name: Download Electron
      - run: yarn gulp hygiene
        name: Run Hygiene Checks
      - run: yarn strict-vscode # {{SQL CARBON EDIT}} add step
        name: Run Strict Compile Options
            !**/Release/*.pdb
            !**/Release/*.ilk
            !**/Release/obj/**
            !**/Release/**/*.tlog
          key: ${{ runner.os }}-cacheNodeModules4-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-cacheNodeModules4-
      #   name: Run Monaco Editor Checks
      - run: yarn valid-layers-check
        name: Run Valid Layers Checks
      - run: yarn compile
        name: Compile Sources
      # - run: yarn download-builtin-extensions {{SQL CARBON EDIT}} remove step
      #   name: Download Built-in Extensions
      - run: .\scripts\test.bat --tfs "Unit Tests"
        name: Run Unit Tests (Electron)
    # - run: yarn test-browser --browser chromium {{SQL CARBON EDIT}} disable for now @TODO @anthonydresser
    #   name: Run Unit Tests (Browser)
    # - run: .\scripts\test-integration.bat --tfs "Integration Tests" {{SQL CARBON EDIT}} remove step
    #   name: Run Integration Tests (Electron)

  darwin:
    runs-on: macos-latest
    env:
      CHILD_CONCURRENCY: "1"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2.2.0
      - uses: actions/setup-node@v1
        with:
          node-version: 10
      # Increase timeout to get around latency issues when fetching certain packages
      - run: |
          yarn config set network-timeout 300000
          yarn --frozen-lockfile
        name: Install Dependencies
      - run: yarn electron x64
        name: Download Electron
      - run: yarn gulp hygiene
        name: Run Hygiene Checks
      - run: yarn strict-vscode # {{SQL CARBON EDIT}} add step
        name: Run Strict Compile Options
          key: ${{ runner.os }}-cacheNodeModules4-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-cacheNodeModules4-
      #   name: Run Monaco Editor Checks
      - run: yarn valid-layers-check
        name: Run Valid Layers Checks
      - run: yarn compile
        name: Compile Sources
      # - run: yarn download-builtin-extensions {{SQL CARBON EDIT}} remove step
      #   name: Download Built-in Extensions
      - run: ./scripts/test.sh --tfs "Unit Tests"
        name: Run Unit Tests (Electron)
  #   - run: yarn test-browser --browser chromium --browser webkit
  #     name: Run Unit Tests (Browser)
  #   - run: ./scripts/test-integration.sh --tfs "Integration Tests"
  #     name: Run Integration Tests (Electron)

  # monaco:
  #   runs-on: ubuntu-latest
  #   env:
  #     CHILD_CONCURRENCY: "1"
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #   - uses: actions/checkout@v2.2.0
  #   # TODO: rename azure-pipelines/linux/xvfb.init to github-actions
  #   - run: |
  #       sudo apt-get update
  #       sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgbm1
  #       sudo cp build/azure-pipelines/linux/xvfb.init /etc/init.d/xvfb
  #       sudo chmod +x /etc/init.d/xvfb
  #       sudo update-rc.d xvfb defaults
  #       sudo service xvfb start
  #     name: Setup Build Environment
  #   - uses: actions/setup-node@v1
  #     with:
  #       node-version: 10
          key: ${{ runner.os }}-cacheNodeModules4-${{ hashFiles('.yarnrc', 'remote/.yarnrc', '**/yarn.lock', '!**/node_modules/**/yarn.lock', '!**/.*/**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-cacheNodeModules4-
  #   - run: yarn --frozen-lockfile
  #     name: Install Dependencies
  #   - run: yarn monaco-compile-check
  #     name: Run Monaco Editor Checks
  #   - run: yarn gulp editor-esm-bundle
  #     name: Editor Distro & ESM Bundle
